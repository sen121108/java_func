package org.example.algoTime;

public class algo {

    /**
     * O(1)：定数時間
     *
     * 例：配列の先頭要素の取得、変数の加算や減算、論理演算など。入力のサイズに関わらず一定時間で処理が完了する。
     * O(log n)：対数時間
     *
     * 例：2分探索、バイナリヒープによる優先度付きキューの実装など。入力サイズが大きくなっても、計算時間が比例的に増加しない。
     * O(n)：線形時間
     *
     * 例：線形探索、配列の要素の和を求める、単一のループなど。入力サイズに比例して計算時間が増加する。
     * O(n log n)：線形対数時間
     *
     * 例：クイックソート、マージソートなど。入力サイズが大きくなると、計算時間がより速く増加する。
     * O(n^2)：二次時間
     *
     * 例：バブルソート、選択ソート、挿入ソートなど。入力サイズの2乗に比例して計算時間が増加する。
     * O(n^3)：三次時間
     *
     * 例：行列積演算、クラスカルの最小全域木アルゴリズムなど。入力サイズの3乗に比例して計算時間が増加する。
     * O(2^n)：指数時間
     *
     * 例：ビット全探索、ナップサック問題の全探索解法など。入力サイズに対して指数関数的に増加する計算時間を持つ。
     * O(n!)：階乗時間
     *
     * 例：巡回セールスマン問題の全探索解法など。入力サイズに対して階乗関数的に増加する計算時間を持つ。
     */
}
